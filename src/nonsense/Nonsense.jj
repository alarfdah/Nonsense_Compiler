/**
 * JavaCC file
 */
 
options {
  JDK_VERSION = "1.8";
}

PARSER_BEGIN(NonsenseParser)
package nonsense;

import java.util.HashMap;

public final class NonsenseParser {

	public static String register[] = { "%eax", "%ebx", "%ecx", "%edi", "%esi", "%edx" };
	public static int regInUse[] = { 0, 0, 0, 0, 0, 0 };
	public static int offset = 4;
	public static HashMap<String, Integer> map;
	
	public static void main(String args[]) { 
	    NonsenseParser parser;
	    java.io.InputStream input;
	    String factReg, copyReg, expoReg;
		
	    if (args.length==1) {
	    
	      try {
	        input = new java.io.FileInputStream(args[args.length-1]);
	      } catch (java.io.FileNotFoundException e) {
	        System.out.println("File not found.");
	        return;
	      }
	      
	    } 
	    else {
	      System.out.println("Usage: nsc <inputfile>");
	      return;
	    }
	    try {
	      
		  factReg = getRegister(3);
	      copyReg = getRegister(4);
	      expoReg = getRegister(5);
	      System.out.println("\t.intel_syntax");
	      System.out.println("\t.section .rodata");
	      System.out.println(".io_format:");
	      System.out.println("\t.string \"%d\\12\\0\"");
	      System.out.println("\t.text\n\t.global main;");
	      System.out.println("\t.type main, @function");
	      // Power Function
	      System.out.println("power:");
		  System.out.println("\tcmp  " + expoReg + ", 0");
		  System.out.println("\tje   zero");
	      System.out.println("\tjg   loop");
	      System.out.println("\tjmp  return");
	      // Zero Function
	      System.out.println("zero:");
		  System.out.println("\tmov  " + factReg + ", 1");
		  System.out.println("\tjmp  return");
	      // Loop Function
	      System.out.println("loop:");
		  System.out.println("\tcmp  " + expoReg + ", 1");
		  System.out.println("\tje   return");
		  System.out.println("\tsub  " + expoReg + ", 1");
		  System.out.println("\timul " + factReg + ", " + copyReg);
		  System.out.println("\tjg   power");
		  System.out.println("\tjmp  return");
		  // Return Function
		  System.out.println("return:");
		  System.out.println("\tret");
		  // Main Function
	      System.out.println("main:");
	      System.out.println("\tpush %ebp");
	      System.out.println("\tmov  %ebp, %esp");
	      System.out.println("\tsub  %esp, 64");
	      // Initialize Map
	      map = new HashMap<String, Integer>();
	      // Start Program
	      parser = new NonsenseParser(input);
	      parser.program();
	      // Exit
	      System.out.println("\tleave");
	      System.out.println("\tret");
	    } catch (ParseException e) {
	      System.err.println("Syntax Error: " + e.getMessage());
	    }
	}

	/*
	 * Fetches a register.
	 * If passed a number, it will retrieve the corresponding register.
	 * If passed -1, will pass a free register.
	 * Otherwise, returns "error".
	 */
	public static String getRegister(int reg) {
	  if (reg == -1) {
	    int i = 0;
	    for (i = 1; i < 6; i++) {
	      if (regInUse[i] == 0) {
	        regInUse[i] = 1;
	        return register[i];
	        }
	      }
	  } else {
	    regInUse[reg] = 1;
	    return register[reg];
	  }
	  
	  return "error";
	}

	
	public static void freeRegisters() {
	  int i = 0;
	  for (i = 1; i < 6; i++) {
	    if (regInUse[i] == 1) {
	      regInUse[i] = 0;
	    }
	  }
	}

	public static boolean isInt(String s) {
	    try {
	        Integer.parseInt(s);
	        return true;
	    } catch (NumberFormatException ex) {
	        return false;
	    }
	}
	
}

PARSER_END(NonsenseParser)

SKIP :
{
 	" "
|	"\r"
|	"\t"
|	"\n"
} 

TOKEN : /* keywords */
{
	<BEGIN: "begin">
    | <END: "end">
    | <OUTPUT: "output">
}

TOKEN : /* other lexical tokens */
{
 <EQ: "=">
| <SEMICOLON: ";">
| <LPAREN: "(">
| <RPAREN: ")">
| <PLUS: "+">
| <MINUS: "-">
| <TIMES: "*">
| <DIVIDE: "/">
| <EXP: "^">
| <#DIGIT: ["0" - "9"] >
| <#ALPHA: ["a" - "z"] | ["A" - "Z"] >
| <ID: <ALPHA> (<ALPHA> | <DIGIT>)*>
| <INT: "0" | ["1" - "9"](<DIGIT>)* >
}

void program(): {}
{
   <BEGIN> <SEMICOLON> 
   
   ( stmt() )*

   <END> <SEMICOLON>
    
}

void stmt() : {}

{
	( 
		assignment()
  		| output()
	)
	<SEMICOLON>

}

void assignment() : { Token x,y; String expr, reg; int i = 0; }
{
  
  (
    x = <ID>
    <EQ>
    expr = expr()
    {
      // If negative expression
      if (!isInt(expr) && expr.charAt(0) == '-') {
        reg = getRegister(-1);
        System.out.println("\tmov  " + reg + ", dword ptr [%ebp-" + map.get(expr.substring(1)) + "]\n");
        System.out.println("\tneg  " + reg + "\n");
        System.out.println("\tmov  dword ptr [%ebp-" + offset + "], " + reg + "\n");
      // If positive expression
      } else {
        System.out.println("\tmov  dword ptr [%ebp-" + offset + "], " + expr + "\n"); 
      }
      map.put(x.image, offset);
      offset += 4;
      freeRegisters();
    }
  )
}

void output() : { String ret; }
{
	<OUTPUT> <LPAREN>
	(
	 ret = expr()
	) <RPAREN>
	{
	  System.out.println("\tpush dword ptr [%ebp-" + map.get(ret) + "]");
	  System.out.println("\tpush offset flat:.io_format");
	  System.out.println("\tcall printf");
	  System.out.println("\tadd  %esp, 8");
	}
}


String expr() : { String x, y, addSub, reg = null; int i = 0;}
{
  (    x = term()
    
  )
  (
    LOOKAHEAD(2)
    addSub = addOp()
    y = term()
    {
      
      // Get free register
      reg = getRegister(-1);
      
      // Moving x into a register
      if (isInt(x)) {	// If constant
      	System.out.println("\tmov  " + reg + ", " + x);
      } else if (x.charAt(0) == '%') {	// If register
      	System.out.println("\tmov  " + reg + ", " + x);
      } else if (x.charAt(0) == '-') {	// If negative
        System.out.println("\tmov  " + reg + ", dword ptr [%ebp-" + map.get(x.substring(1)) + "]");
        System.out.println("\tneg  " + reg);
      } else {	// If memory address
        System.out.println("\tmov  " + reg + ", dword ptr [%ebp-" + map.get(x) + "]");
      }

      // Adding y to register
      if (isInt(y)) { // If constant
        System.out.println("\t" + addSub + "  " + reg + ", " + y);
      } else if (y.charAt(0) == '%') { // If register
        System.out.println("\t" + addSub + "  " + reg + ", " + y);
      } else { // If memory address
        System.out.println("\t" + addSub + "  " + reg + ", dword ptr [%ebp-" + map.get(y) + "]");
      }
      // Set x to be the register
      x = reg;  
    }
    
  )*
  {
    return x;
  }
} 

String term() : { String x, y, mulDiv, eax, reg, negReg; int i = 0; }
{
   (
     x = nterm()
   )
   (
     LOOKAHEAD(2)
     mulDiv = mulOp()
     y = nterm()
     {
      switch(mulDiv) {
        case "imul":
          // Get free register
          reg = getRegister(-1);
          
		  // Moving x int a register
	      if (isInt(x)) {	// If constant
	      	System.out.println("\tmov  " + reg + ", " + x);
	      } else if (x.charAt(0) == '%') { // If register
	      	System.out.println("\tmov  " + reg + ", " + x);
	      } else if (x.charAt(0) == '-') {	// If negative
        	System.out.println("\tmov  " + reg + ", dword ptr [%ebp-" + map.get(x.substring(1)) + "]");
        	System.out.println("\tneg  " + reg);
      	  } else { // If memory address
	        System.out.println("\tmov  " + reg + ", dword ptr [%ebp-" + map.get(x) + "]");
	      }
	
	      // Multiplying register by y
	      if (isInt(y)) { // If constant
	        System.out.println("\t" + mulDiv + " " + reg + ", " + y);
	      } else if (y.charAt(0) == '%') { // If register
	        System.out.println("\t" + mulDiv + " " + reg + ", " + y);
	      } else if (y.charAt(0) == '-') {	// If negative
	      	negReg = getRegister(-1);
        	System.out.println("\tmov  " + negReg + ", dword ptr [%ebp-" + map.get(y.substring(1)) + "]");
        	System.out.println("\tneg  " + negReg);
	        System.out.println("\t" + mulDiv + " " + reg + ", " + negReg);
      	  } else { // If memory address
	        System.out.println("\t" + mulDiv + " " + reg + ", dword ptr [%ebp-" + map.get(y) + "]");
	      }
	      x = reg;
        break;
        case "idiv":
          eax = getRegister(0); // %eax
          // Moving x in to eax
	      if (isInt(x)) {	// If constant
	      	System.out.println("\tmov  " + eax + ", " + x);
	      } else if (x.charAt(0) == '%') { // If register
	      	System.out.println("\tmov  " + eax + ", " + x);
	      } else if (x.charAt(0) == '-') {	// If negative
        	System.out.println("\tmov  " + eax + ", dword ptr [%ebp-" + map.get(x.substring(1)) + "]");
        	System.out.println("\tneg  " + eax);
      	  } else { // If memory address
	        System.out.println("\tmov  " + eax + ", dword ptr [%ebp-" + map.get(x) + "]");
	      }

	      
	      reg = getRegister(-1);
	      // Dividing eax by y
	      if (isInt(y)) { // If constant
	      	System.out.println("\tmov  " + reg + ", " + y);
	      	System.out.println("\tcdq");
	        System.out.println("\t" + mulDiv + " " + reg);
	      } else if (y.charAt(0) == '%') { // If register
	      	System.out.println("\tcdq");
	        System.out.println("\t" + mulDiv + " " + y);
	      } else if (y.charAt(0) == '-') {	// If negative
	      	negReg = getRegister(-1);
        	System.out.println("\tmov  " + negReg + ", dword ptr [%ebp-" + map.get(y.substring(1)) + "]");
        	System.out.println("\tneg  " + negReg);
        	System.out.println("\tcdq");
        	System.out.println("\t" + mulDiv + " " + negReg);
      	  } else { // If memory address
	      	System.out.println("\tmov  " + reg + ", dword ptr [%ebp-" + map.get(y) + "]");
	      	System.out.println("\tcdq");
	        System.out.println("\t" + mulDiv + " " + reg);
	      }
	      x = eax;
        break;
      }
        
    }
   )*

   {
     return x;
   }
}

String nterm() : { Token minus = null; String ret; }
{
	(
	  minus = <MINUS>
	)?
	(
	 ret = eterm()
	  {
	    if (minus != null) {
	      return "-" + ret;
	    }
	    return ret;
	  }
	)
}

String eterm() : {
  Token exponent = null;
  String ret, eterm, factReg, copyReg, expoReg;
  int exists = 0;
}
{
	(	  ret = factor()
	)
	(
	  exponent = <EXP>
	  eterm = eterm()
	  {
	    // Registers
		factReg = getRegister(3);	// %edi
	    copyReg = getRegister(4);	// %esi
	    expoReg = getRegister(5);	// %edx

		// Move exponent into register
	    if (isInt(eterm)) { // If constant
		  System.out.println("\tmov  " + expoReg + ", " + eterm);
		} else if (eterm.charAt(0) == '%') { // If register
		  System.out.println("\tmov  " + expoReg + ", " + eterm);
		} else { // If memory address
		  System.out.println("\tmov  " + expoReg + ", dword ptr [%ebp-" + map.get(eterm) + "]");
		}

		// Move factor into register
	    if (isInt(ret)) { // If constant
		  System.out.println("\tmov  " + factReg + ", " + ret);
	    } else if (ret.charAt(0) == '%') { // If register
		  System.out.println("\tmov  " + factReg + ", " + ret);
		} else { // If memory address
	      System.out.println("\tmov  " + factReg + ", dword ptr [%ebp-" + map.get(ret) + "]");
	    }

	    // Make a copy of factor
		System.out.println("\tmov  " + copyReg + ", " + factReg);

		// Call power
		System.out.println("\tcall power");

		ret = factReg;
	  }
	)?
	{
	  	
	    return ret;
	}
}

String factor() : { Token x = null, y = null; int i = 0; String reg = null;}
{
  (    x = <INT>
    { return x.image; }
  ) 
  |
  (
    y = <ID>
    { return y.image; }
  )
  | <LPAREN> ( expr() ) <RPAREN>
  
}


String addOp() : { Token x = null; }
{
	(
	  x = <PLUS>
	  {
	    return "add";
	  }
	) 
	|
	(
	  x = <MINUS>
	  {
	    return "sub";
	  }
	)
}

String mulOp() : { Token x = null; }
{
	(	  x = <TIMES>
	  {
	    return "imul";
	  }
	)
	|
	(	  x = <DIVIDE>
	  {
	    return "idiv";
	  }
	)
}


